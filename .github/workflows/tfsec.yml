name: tfsec
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@master

      - name: Run tfsec
        id: run_sectest
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true
          format: json
          additional_args: --out results.json
        env:
          ACTIONS_STEP_DEBUG: true

      - name: Parse output
        id: parse_output
        run: jq -r '.results[] | "The issue *\(.rule_description)* was detected in the file *\(.location.filename)* between the lines \(.location.start_line) and \(.location.end_line)"' results.json

      - name: Comment PR with tfsec results
        uses: actions/github-script@v4
        with:
          github-token: ${{ github.token }}
          script: |
            const output = `TFSec results:\n\n${steps.parse_output.outputs.parsed_output}`;
            const context = github.context;
            const octokit = new github.getOctokit('${{ github.token }}');
            const { data: comments } = await octokit.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            const comment = comments.find(comment => comment.user.login === 'github-actions[bot]' && comment.body.startsWith('TFSec results:'));
            if (comment) {
              await octokit.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
                body: output
              });
            } else {
              await octokit.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              });
            }
