name: tfsec
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        uses: actions/checkout@v2
        
      - name: tfsec for critical/high risk security issues
        id: tfsec_summary
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          format: json
          additional_args: --minimum-severity HIGH
        env:
          ACTIONS_STEP_DEBUG: true

      - name: tfsec
        id: run_sectest
        uses: aquasecurity/tfsec-action@v1.0.0
        if: always()
        with:
          soft_fail: true
          format: json
          additional_args: --out results.json 
        env:
          ACTIONS_STEP_DEBUG: true

      - name: parse output
        id: parse_output
        if: always()
        run: |
          echo ::set-output name=parse_output::$(jq -r '.results[] | ". The issue ^^ \(.rule_description) ^^ was detected in the file ^^ \(.location.filename) ^^ between the lines <u>\(.location.start_line)</u> and <u>\(.location.end_line).</u><br>"' results.json | nl)

      - name: Comment PR
        uses: actions/github-script@v4
        if: always()
        with:
          script: |
            const parse_output = '${{ steps.parse_output.outputs.parse_output }}'
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `The following security issues were detected in the terraform file(s):<br><br>${parse_output}`
            })
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Generate Summary Table
        id: summary_table
        if: always()
        run: |
          SEVERITY=$(jq -r '.results[] | select(.severity == "HIGH" or .severity == "CRITICAL") | .severity' results.json)
          echo "Severity | Rule Description | Resource"
          echo "-------- | ---------------- | --------"
          for s in $SEVERITY; do
            jq -r --arg s "$s" '.results[] | select(.severity == $s) | "\(.severity) | \(.rule_description) | \(.resource)"' results.json
          done
        env:
          ACTIONS_STEP_DEBUG: true
      
      - name: Comment PR Summary Table
        if: always()
        uses: actions/github-script@v4
        with:
          script: |
            const summary_table = '${{ steps.summary_table.outputs.stdout }}'
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Summary Table:<br><br>${summary_table}`
            })
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Summary table
        if: always()
        run: |
          # Parse json output from tfsec_summary step
          output=$(cat ${{ github.workspace }}/tfsec_summary.json)
          # Count issues by severity
          high=$(echo $output | jq '.results | map(select(.severity == "HIGH")) | length')
          medium=$(echo $output | jq '.results | map(select(.severity == "MEDIUM")) | length')
          low=$(echo $output | jq '.results | map(select(.severity == "LOW")) | length')
          info=$(echo $output | jq '.results | map(select(.severity == "INFO")) | length')
          # Print summary table
          echo "## Security issues summary table"
          echo "| Severity | Count |"
          echo "|----------|-------|"
          echo "| High     | $high |"
          echo "| Medium   | $medium |"
          echo "| Low      | $low |"
          echo "| Info     | $info |"
       
      - name: Delete Results file
        if: always()
        run: rm -f results.json
